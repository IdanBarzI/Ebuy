// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlData;

#nullable disable

namespace SqlData.Migrations
{
    [DbContext(typeof(_1044_EEK1Context))]
    [Migration("20220825062614_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "J.K.ROWLING"
                        },
                        new
                        {
                            Id = 2,
                            AuthorName = "Amit Segal"
                        });
                });

            modelBuilder.Entity("Models.Bogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Bogolevel")
                        .HasColumnType("int")
                        .HasColumnName("BOGOlevel");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("BOGO", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Bogolevel = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            Bogolevel = 2,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Book"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Book"
                        });
                });

            modelBuilder.Entity("Models.CountriesArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShipmentAreaId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentAreaID");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentAreaId");

                    b.ToTable("CountriesAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "US",
                            ShipmentAreaId = 2
                        },
                        new
                        {
                            Id = 2,
                            Country = "UK",
                            ShipmentAreaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Country = "France",
                            ShipmentAreaId = 1
                        },
                        new
                        {
                            Id = 4,
                            Country = "Italy",
                            ShipmentAreaId = 1
                        },
                        new
                        {
                            Id = 5,
                            Country = "Israel",
                            ShipmentAreaId = 3
                        });
                });

            modelBuilder.Entity("Models.CreditCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("CreditCardTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MasyerCardLocal",
                            Prefix = "5100"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Visa",
                            Prefix = "4580"
                        },
                        new
                        {
                            Id = 3,
                            Name = "American Express",
                            Prefix = "3755"
                        });
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsClubMember")
                        .HasColumnType("bit");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Models.DeliveryMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryModes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "electronically"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Hard copy"
                        });
                });

            modelBuilder.Entity("Models.Discount", b =>
                {
                    b.Property<double?>("ClubMemberDiscount")
                        .HasColumnType("float");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Publishdate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            IsSold = true,
                            Keywords = "The first book of Harry Potter series",
                            Price = 50.0,
                            Publishdate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CategoryId = 1,
                            IsSold = true,
                            Keywords = "The second book of Harry Potter series",
                            Price = 50.0,
                            Publishdate = new DateTime(1998, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            CategoryId = 1,
                            IsSold = false,
                            Keywords = "The third book of Harry Potter series",
                            Price = 60.0,
                            Publishdate = new DateTime(1999, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CategoryId = 2,
                            IsSold = false,
                            Keywords = "The first magazine",
                            Price = 10.0,
                            Publishdate = new DateTime(2008, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Stam"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            CategoryId = 2,
                            IsSold = false,
                            Keywords = "good story",
                            Price = 70.0,
                            Publishdate = new DateTime(2020, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Ickabog"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            CategoryId = 1,
                            IsSold = false,
                            Keywords = "The last magazine",
                            Price = 40.0,
                            Publishdate = new DateTime(1998, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Borat"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            CategoryId = 1,
                            IsSold = false,
                            Keywords = "The last magazine",
                            Price = 40.0,
                            Publishdate = new DateTime(1998, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Borat"
                        });
                });

            modelBuilder.Entity("Models.PurchasedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BasicCost")
                        .HasColumnType("float");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<double?>("PriceAfterDiscount")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<double>("Vat")
                        .HasColumnType("float")
                        .HasColumnName("VAT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PurchasedProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicCost = 1500.0,
                            CustomerId = 2,
                            PriceAfterDiscount = 1120.0,
                            ProductId = 1,
                            PurchaseDate = new DateTime(2022, 8, 25, 9, 26, 14, 394, DateTimeKind.Local).AddTicks(4879),
                            TransactionId = 1,
                            Vat = 0.0
                        },
                        new
                        {
                            Id = 2,
                            BasicCost = 3000.0,
                            CustomerId = 3,
                            PriceAfterDiscount = 2500.0,
                            ProductId = 2,
                            PurchaseDate = new DateTime(2022, 8, 25, 9, 26, 14, 394, DateTimeKind.Local).AddTicks(4916),
                            TransactionId = 1,
                            Vat = 0.0
                        });
                });

            modelBuilder.Entity("Models.ShipmentAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Buyer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pbo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PBO");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Country");

                    b.ToTable("ShipmentAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Buyer = "roni",
                            City = "Jerusalem",
                            Country = 1,
                            Email = "roni@gmail.com",
                            HouseNumber = "14",
                            State = "North Carolina",
                            Street = "af",
                            ZipCode = "763245"
                        });
                });

            modelBuilder.Entity("Models.ShipmentArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ShipmentAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = "Europe"
                        },
                        new
                        {
                            Id = 2,
                            Area = "America"
                        },
                        new
                        {
                            Id = 3,
                            Area = "Asia"
                        });
                });

            modelBuilder.Entity("Models.ShipmentCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ShipmentCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Amazone"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Chita"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Ron"
                        });
                });

            modelBuilder.Entity("Models.ShipmentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ShipmentOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Email"
                        },
                        new
                        {
                            Id = 2,
                            Description = "delivery"
                        });
                });

            modelBuilder.Entity("Models.ShipmentPrice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<double>("BasicCharge")
                        .HasColumnType("float");

                    b.Property<double>("ItemCharge")
                        .HasColumnType("float");

                    b.Property<int>("ShipmentAreaId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentAreaID");

                    b.Property<int>("ShipmentCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentCompanyID");

                    b.Property<int>("ShipmentDuration")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentOptionID");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentAreaId");

                    b.HasIndex("ShipmentCompanyId");

                    b.HasIndex("ShipmentOptionId");

                    b.ToTable("ShipmentPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicCharge = 10.0,
                            ItemCharge = 2.0,
                            ShipmentAreaId = 1,
                            ShipmentCompanyId = 1,
                            ShipmentDuration = 9,
                            ShipmentOptionId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasicCharge = 15.0,
                            ItemCharge = 1.0,
                            ShipmentAreaId = 2,
                            ShipmentCompanyId = 1,
                            ShipmentDuration = 14,
                            ShipmentOptionId = 1
                        },
                        new
                        {
                            Id = 3,
                            BasicCharge = 13.0,
                            ItemCharge = 1.0,
                            ShipmentAreaId = 1,
                            ShipmentCompanyId = 2,
                            ShipmentDuration = 10,
                            ShipmentOptionId = 1
                        },
                        new
                        {
                            Id = 4,
                            BasicCharge = 14.0,
                            ItemCharge = 0.69999999999999996,
                            ShipmentAreaId = 2,
                            ShipmentCompanyId = 2,
                            ShipmentDuration = 5,
                            ShipmentOptionId = 1
                        },
                        new
                        {
                            Id = 5,
                            BasicCharge = 9.0,
                            ItemCharge = 0.20000000000000001,
                            ShipmentAreaId = 3,
                            ShipmentCompanyId = 1,
                            ShipmentDuration = 15,
                            ShipmentOptionId = 2
                        },
                        new
                        {
                            Id = 6,
                            BasicCharge = 5.0,
                            ItemCharge = 0.59999999999999998,
                            ShipmentAreaId = 1,
                            ShipmentCompanyId = 1,
                            ShipmentDuration = 21,
                            ShipmentOptionId = 2
                        },
                        new
                        {
                            Id = 7,
                            BasicCharge = 6.9000000000000004,
                            ItemCharge = 0.80000000000000004,
                            ShipmentAreaId = 3,
                            ShipmentCompanyId = 2,
                            ShipmentDuration = 18,
                            ShipmentOptionId = 2
                        },
                        new
                        {
                            Id = 8,
                            BasicCharge = 7.9900000000000002,
                            ItemCharge = 1.2,
                            ShipmentAreaId = 2,
                            ShipmentCompanyId = 2,
                            ShipmentDuration = 19,
                            ShipmentOptionId = 2
                        },
                        new
                        {
                            Id = 9,
                            BasicCharge = 4.0,
                            ItemCharge = 5.5999999999999996,
                            ShipmentAreaId = 1,
                            ShipmentCompanyId = 1,
                            ShipmentDuration = 16,
                            ShipmentOptionId = 2
                        },
                        new
                        {
                            Id = 10,
                            BasicCharge = 2.0,
                            ItemCharge = 0.40000000000000002,
                            ShipmentAreaId = 3,
                            ShipmentCompanyId = 1,
                            ShipmentDuration = 13,
                            ShipmentOptionId = 2
                        },
                        new
                        {
                            Id = 11,
                            BasicCharge = 20.989999999999998,
                            ItemCharge = 0.59999999999999998,
                            ShipmentAreaId = 1,
                            ShipmentCompanyId = 2,
                            ShipmentDuration = 12,
                            ShipmentOptionId = 1
                        },
                        new
                        {
                            Id = 12,
                            BasicCharge = 19.989999999999998,
                            ItemCharge = 0.20000000000000001,
                            ShipmentAreaId = 2,
                            ShipmentCompanyId = 2,
                            ShipmentDuration = 11,
                            ShipmentOptionId = 1
                        });
                });

            modelBuilder.Entity("Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "California"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Maine"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = 29,
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = 30,
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 31,
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = 32,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 33,
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = 34,
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = 40,
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = 41,
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Utah"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 48,
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CcexpireDate")
                        .HasColumnType("date")
                        .HasColumnName("CCExpireDate");

                    b.Property<string>("Ccnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CCNumber");

                    b.Property<string>("CcownerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CCOwnerName");

                    b.Property<int>("CctypeId")
                        .HasColumnType("int")
                        .HasColumnName("CCTypeID");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<int>("DeliveryModeId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryModeID");

                    b.Property<int>("ShipmentAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentAddressID");

                    b.Property<int>("ShipmentCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentCompanyID");

                    b.Property<double>("ShipmentCost")
                        .HasColumnType("float");

                    b.Property<int>("ShipmentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentOptionID");

                    b.HasKey("Id");

                    b.HasIndex("CctypeId");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("ShipmentAddressId");

                    b.HasIndex("ShipmentOptionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CcexpireDate = new DateTime(2028, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ccnumber = "5100456376489623",
                            CcownerName = "roni",
                            CctypeId = 1,
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryModeId = 1,
                            ShipmentAddressId = 1,
                            ShipmentCompanyId = 1,
                            ShipmentCost = 22.399999999999999,
                            ShipmentOptionId = 1
                        });
                });

            modelBuilder.Entity("Models.Vat", b =>
                {
                    b.Property<double?>("Vat1")
                        .HasColumnType("float")
                        .HasColumnName("Vat");

                    b.ToTable("VAT", (string)null);
                });

            modelBuilder.Entity("Models.CasualCustomer", b =>
                {
                    b.HasBaseType("Models.Customer");

                    b.Property<DateTime?>("FirstPurchasing")
                        .HasColumnType("datetime2");

                    b.ToTable("CasualCustomer", (string)null);
                });

            modelBuilder.Entity("Models.ClubMember", b =>
                {
                    b.HasBaseType("Models.Customer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.ToTable("ClubMember", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Addres = "neve shanan",
                            Email = "roni@gmail.com",
                            IsClubMember = true,
                            LoginName = "roni",
                            Password = "loli64",
                            RegistrationDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CustomerId = 2,
                            Addres = "yakov orlans",
                            Email = "nitzan@gmail.com",
                            IsClubMember = true,
                            LoginName = "nitzan",
                            Password = "loli65",
                            RegistrationDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CustomerId = 3,
                            Addres = "neve shanan",
                            Email = "roni@gmail.com",
                            IsClubMember = true,
                            LoginName = "tomi",
                            Password = "loli66",
                            RegistrationDate = new DateTime(2019, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Models.Bogo", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("Bogos")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_BOGO_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.CountriesArea", b =>
                {
                    b.HasOne("Models.ShipmentArea", "ShipmentArea")
                        .WithMany("CountriesAreas")
                        .HasForeignKey("ShipmentAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_CountriesAreas_ShipmentAreas");

                    b.Navigation("ShipmentArea");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.Author", "Author")
                        .WithMany("Products")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Products_Authors");

                    b.HasOne("Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Categories");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.PurchasedProduct", b =>
                {
                    b.HasOne("Models.Customer", "Customer")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_purchasedProducts_Customers");

                    b.HasOne("Models.Product", "Product")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_purchasedProducts_Products");

                    b.HasOne("Models.Transaction", "Transaction")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_purchasedProducts_Transactions");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Models.ShipmentAddress", b =>
                {
                    b.HasOne("Models.CountriesArea", "CountryNavigation")
                        .WithMany("ShipmentAddresses")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_ShipmentAddresses_CountriesAreas");

                    b.Navigation("CountryNavigation");
                });

            modelBuilder.Entity("Models.ShipmentPrice", b =>
                {
                    b.HasOne("Models.ShipmentArea", "ShipmentArea")
                        .WithMany("ShipmentPrices")
                        .HasForeignKey("ShipmentAreaId")
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentPrices_ShipmentAreas");

                    b.HasOne("Models.ShipmentCompany", "ShipmentCompany")
                        .WithMany("ShipmentPrices")
                        .HasForeignKey("ShipmentCompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentPrices_ShipmentCompanies");

                    b.HasOne("Models.ShipmentOption", "ShipmentOption")
                        .WithMany("ShipmentPrices")
                        .HasForeignKey("ShipmentOptionId")
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentPrices_ShipmentOptions");

                    b.Navigation("ShipmentArea");

                    b.Navigation("ShipmentCompany");

                    b.Navigation("ShipmentOption");
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.HasOne("Models.CreditCardType", "Cctype")
                        .WithMany("Transactions")
                        .HasForeignKey("CctypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_CreditCardTypes");

                    b.HasOne("Models.DeliveryMode", "DeliveryMode")
                        .WithMany("Transactions")
                        .HasForeignKey("DeliveryModeId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_DeliveryMode");

                    b.HasOne("Models.ShipmentAddress", "ShipmentAddress")
                        .WithMany("Transactions")
                        .HasForeignKey("ShipmentAddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_ShipmentAddresses");

                    b.HasOne("Models.ShipmentOption", "ShipmentOption")
                        .WithMany("Transactions")
                        .HasForeignKey("ShipmentOptionId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_ShipmentOptions");

                    b.Navigation("Cctype");

                    b.Navigation("DeliveryMode");

                    b.Navigation("ShipmentAddress");

                    b.Navigation("ShipmentOption");
                });

            modelBuilder.Entity("Models.CasualCustomer", b =>
                {
                    b.HasOne("Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("Models.CasualCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ClubMember", b =>
                {
                    b.HasOne("Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("Models.ClubMember", "CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Author", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.CountriesArea", b =>
                {
                    b.Navigation("ShipmentAddresses");
                });

            modelBuilder.Entity("Models.CreditCardType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Navigation("PurchasedProducts");
                });

            modelBuilder.Entity("Models.DeliveryMode", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Navigation("Bogos");

                    b.Navigation("PurchasedProducts");
                });

            modelBuilder.Entity("Models.ShipmentAddress", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Models.ShipmentArea", b =>
                {
                    b.Navigation("CountriesAreas");

                    b.Navigation("ShipmentPrices");
                });

            modelBuilder.Entity("Models.ShipmentCompany", b =>
                {
                    b.Navigation("ShipmentPrices");
                });

            modelBuilder.Entity("Models.ShipmentOption", b =>
                {
                    b.Navigation("ShipmentPrices");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.Navigation("PurchasedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
